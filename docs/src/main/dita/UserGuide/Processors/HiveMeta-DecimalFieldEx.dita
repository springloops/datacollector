<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
      
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_mrh_hrp_fx">
 <title>Decimal Field Expressions</title>
 <conbody>
  <p>Decimal field expressions define the precision and scale to use for decimal fields. When you
            configure the Hive Metadata processor, you specify an expression for the precision and
            for the scale. </p>
        <p>You can enter expressions that evaluate to the same precision and scale for all decimal
            fields in the record. For example, if your use case allows it, you could use a precision
            of 10 and scale of 2 for all decimal fields.</p>
        <p>Or you can create a more complex expression that evaluates to different values for
            different decimal fields. </p>
        <p>The default expressions for these properties use JDBC header attributes. You can use the
            following default expressions when processing data from the JDBC
            Consumer:<codeblock>${record:attribute(str:concat(str:concat('jdbc.', field:field()), '.precision'))}
${record:attribute(str:concat(str:concat('jdbc.', field:field()), '.scale'))}</codeblock></p>
        <p>The <codeph>field:field</codeph> function returns the name of the field. So by default,
            the expressions resolve
            to:<codeblock>${record:attribute(jdbc.&lt;fieldname>.precision)}
${record:attribute(jdbc.&lt;fieldname>.scale)}</codeblock></p>
        <p><note>The JDBC Consumer creates JDBC header attributes by default, writing the precision
                and scale of each decimal field to a record header attribute. </note>In these
            expressions, 'jdbc.' represents the default prefix for the JDBC header attributes. You
            can change the prefix in the JDBC Consumer. If you change the prefix, be sure to update
            it in the decimal field expressions.</p>
        <p>For information about enabling the JDBC Consumer to create JDBC header attributes, see
                <xref href="../Origins/JDBCConsumer-HeaderHDS.dita#concept_tvf_tgp_fx"/>.</p>
 </conbody>
</concept>
